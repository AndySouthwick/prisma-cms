type Mutation {
  #user
  updateUser(userId: ID!, email: String, hashed: String, name: String): User
  createUser(name: String! email: String! hashed: String!): User
  loginUser(email: String!, hashed: String!):AuthenticatedToken

  #contentType
  createContentType(typeName: String, inputType: ID):ContentType
  updateContentType(id: ID!, typeName: String, iterable: Boolean):ContentType
  addInputTypeToContentType(contentTypeId: ID!, label: String, help: String, input: Input):InputType
  updateInputType(inputTypeId: ID!, label: String, help: String, input: Input):InputType

  #pages
  createDraft(title: String!, userId: ID!): Page
  publish(pageId: ID!): Page

  #contentAreas
  createContentArea(pageName: String, pageId: ID, areaName: String iterable: Boolean): ContentArea
  updateContentArea(areaId: ID,  areaName: String, order: Int, iterable: Boolean):ContentArea
  updateContentAreas(areaName: String, order: Int, iterable: Boolean):ContentArea

  #text
  createText(contentId: ID, inputTypeName: String, inputTypeValue: String): Text
  updateText(id: ID! inputTypeName: String, inputTypeValue: String): Text
  updateRichText(id: ID! inputTypeName: String, inputTypeValue: String): Text
  addContentToArea(areaId: ID, contentTypeName: String, content: ID): Content
  addContentToTemplateArea(areaId: ID,  contentTypeName: String, content: ID):Content
  addTextToContent(contentId: ID! inputTypeName: String, inputTypeValue: String): Text

  #richText
  addRichTextToContent(contentId: ID! inputTypeName: String, inputTypeValue: String): RichText
  addReferenceToContent(contentId: ID! inputTypeName: String, inputTypeValue: String): Reference
  updateContent(file: String, togle: Boolean): Content

  #image
  updateImage(id: ID!, altText: String, imageSizeOnly: ImageType,  marketCode: MarketCodes): Image
  createImage(imageUrl: String!, altText: String!, imageDimensions: String, thumbnail: String, imageSizeOnly: ImageType): Image
  addImageToMarket(imageId: ID! marketCode: MarketCodes): [Image]
  deleteImage(id: ID!): Image

  #templateArea
  createTemplateArea(areaName: String, order: Int): TemplateArea
}

type AuthenticatedToken {
  token: String
}

type Query {
  allImages: [Image]
  allMarkets: [Market]
  filterImagesByMarket(orderBy: MarketCodes): [Market]
  filterImagesByDimensions(filter: String): [Image]
  imageHasMarkets(imageId: ID!):[Image]
  inputTypesOfContentType(contentTypeId: ID, contentTypeName: String): [InputType!]
  isAuthenticated:AuthenticatedToken
  allContentTypes:[ContentType]
  contentType(name: String): ContentType
  inputTypes: [InputType]
  page(pageName: String, pageId: ID! orderBy: SortableField): Page
  contentAreas(orderBy: SortableField): [ContentArea!]!
  contentAreasOnPage(pageName: String, pageId: ID, orderBy: SortableField): [ContentArea!]!
  allUsers: [User]
  allContent: [Content]
  contentArea(areaId: ID): ContentArea
  allPages: [Page!]!
  content(id: ID!):Content
}

type User {
  id: ID!
  email: String
  name: String!
  pages: [Page!]!
  hashed: String!
}

type Page {
  id: ID!
  title: String!
  published: Boolean!
  user: User
  contentAreas: [ContentArea]
}

type TemplateArea {
  id: ID!
  areaName: String!
  content: [Content]
  order: Int,
  markets: [Market]
}

type ContentArea {
  id: ID!
  areaName: String
  content: [Content]
  page: Page!
  order: Int!
  iterable: Boolean
}


type Content {
  templateArea: TemplateArea
  contentArea: ContentArea
  page: Page
  id: ID!
  contentTypeName: String
  texts: [Text]
  richTexts: [RichText]
  fileUpload: String
  reference: [Reference]
  toggle: Boolean
  iterable: Boolean

}

type Text {
  id: ID!
  content: Content!
  inputTypeName: String
  inputTypeValue: String
}

type RichText {
  id: ID!
  content: Content!
  inputTypeName: String
  inputTypeValue: String
}

type Reference {
  id: ID!
  content: Content!
  inputTypeName: String
  inputTypeValue: String
}

type ContentType {
  id: ID!
  typeName: String!
  inputTypes: [InputType]
  iterable: Boolean
}
type InputType {
  id: ID!
  label: String
  help: String
  input: Input
  contentType: ContentType!
}

type Image {
  id: ID!
  imageUrl: String
  altText: String
  markets: [Market]
  imageDimensions: String
  thumbnail: String
}
type Market {
  id: ID!
  marketCode: MarketCodes
  images: [Image]
}
enum MarketCodes {
  EN_US
  ES_US
  CH_US
}

enum ImageType {
  Cover
  Card
  Hero
  Product
}
enum Input{
  TEXT
  RICH_TEXT
  FILE_UPLOAD
  DATE_RANGE
  TOGGLE
  SELECT
}

enum SortableField {
  order_ASC
  order_DESC
}